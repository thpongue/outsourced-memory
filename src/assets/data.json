{
  "data": {
    "development": {
      "angular": {
        "routing": {
          "router-outlet tag": {
            "text": "this is not intended to contain the component just to mark where it's meant to go - see the comment by Pascal Precht in the link",
            "link": "https://github.com/angular/router/issues/325"
          },
          "nested data-driven components": {
            "text": "pass the app-nested-list the topmost level then within app-nested-list component extract the next layer of data which it passes to another instance of app-nested-list\nthis continues recursively",
            "code": "// parent node\n<app-nested-list [data]=\"data\"></app-nested-list>\n\n// then within the nested-list component\n<ul>\n<li *ngFor=\"let key of dataKeys\">\n<div [innerHTML]=\"toString(key) | escapeHtmlTags | sanitizeHtmlPipe\"></div>\n<app-nested-list [data]=\"data[key]\"></app-nested-list>\n</li>\n</ul>"
          },
          "displaying code within inner html": {
            "text": "by default all code set via html will be added as html in the dom rather than as text, so if you want to show an html code sample you can create a pipe to replace < with &amp;lt; and > with &amp;gt;",
            "code": "html.replace(/</g, '&amp;lt;').replace(/>/g, '&amp;gt;').replace(/\\n/g, '<br>');"
          },
          "arguments to angular pipes": {
            "text": "when adding a pipe to your template use : to then pass parameters, : delimited for multiples,",
            "code": "myString | myPipe : myParam"
          },
          "library projects": "currently ng-packagr doesn't have the ability to package up assets for library projects\n There is a workaround involving the code below in your npm scripts then referencing <your node module>/src/assets as one of the assets in your angular.json but its a bit icky. In my case I was referencing an svg file which I just put inline",
          "todo": {
            "micro front-ends": "using @angular/elements"
          }
        }
      },
      "vim": {
        "switch case": "~",
        "reload current file": ":edit",
        "current line to top of screen": "z"
      },
      "tmux": {
        "text": "I've hit the point where the number of tabs in my console are disappearing off the end of the window.\n Tmux helps with this - instead of window -E tab - terminal - shell it does window - tab - terminal -E shell.\n More accurately we have something more like window - tab - terminal shell -E tmux session -E tmux window -E tmux pane - tmux shell. Although I love the ideas here my early experiences are that nvm stopped working and my vim settings were changed. I'll come back to this but not time to resolve these types of problems at the mo"
      },
      "typescript and javascript": {
        "regex": {
          "negative lookahead": {
            "text": "this isn't possible in javascript / typescript but this workaround is pretty straightforward\neg if you want to match all html tags except <code>",
            "code": "/(?!<code>)<.*>/g"
          }
        }
      },
      "nginx": {
        "installing on a mac": "brew install nginx",
        "basic commands": {
          "code": "// start in background\nnginx\n\n// fast shutdown\nnginx -s stop\n\n// graceful shutdown\nnginx -quit - graceful shutdown\n\n// update from nginx.conf\nnginx -s reload"
        },
        "nginx.conf": "this cannot be made unique per project (without containers) - it lives in /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx"
      },
      "nginx Dockerfile": {
        "super simple example": {
          "dockerfile": {
            "code": "# just create the default server\nFROM nginx"
          },
          "create the image": {
            "code": "docker build -t outsourcedmemory ."
          },
          "list all images to see your new entry": {
            "code": "docker image ls"
          },
          "create the container from the image": {
            "code": "docker run -itd --name outsourcedmemorycontainer --publish 8080:80 outsourcedmemory"
          },
          "list all containers to see your new entry": {
            "code": "docker container ls"
          },
          "view the site": "go to http://localhost:8080/ to see the standard nginx page",
          "get the id of the running container": {
            "text": "copy the container id shown for your new container",
            "code": "docker container ls"
          },
          "stop the running container": {
            "code": "docker container rm <container id>"
          }
        }
      },
      "docker": {
        "images and containers": "a container is an instance of an image",
        "hub": "hub.docker.com - repo of shared images",
        "commands": {
          "create an image": {
            "code": "docker build -t your-project-tag-name ."
          },
          "create a container from an image": {
            "code": "docker run -p 4201:4200 --name your-project-tag-name your-project-tag-name"
          }
        },
        "stop all running containers": {
          "code": "docker stop $(docker ps -a -q)"
        }
      },
      "css": {
        "preventing double borders on n adjacent boxes": {
          "code": "div {border-right: none;}\ndiv:last-child {border-right: 1px}"
        },
        "media query precedence": "these don't take precedence over regular css - best to stick these at the bottom of the css to ensure they're applied"
      },
      "npm": {
        "using variables in scripts": {
          "using the version property": {
            "code": "echo $npm_package_version"
          },
          "using a custom property": {
            "in your package.json add": {
              "code": "\"config\": {\n\t\"my_prop\": \"my val\"\n}"
            },
            "in your script": {
              "code": "echo $npm_package_config_my_prop"
            }
          },
          "making it work cross platform": {
            "windows requires a different syntax - so to make your code cross-platform try the cross-var package": {
              "code": "%npm_package_<my prop>%"
            },
            "install cross var": {
              "code": "npm i cross-var --save-dev"
            },
            "use cross var": {
              "code": "cross-var echo $npm_package_<my prop>"
            }
          }
        }
      }
    }
  }
}
