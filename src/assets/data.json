{
  "data": {
    "development": {
      "angular": {
        "routing": {
          "router-outlet tag": {
            "text": "this is not intended to contain the component just to mark where it's meant to go - see the comment by Pascal Precht in the link",
            "link": "https://github.com/angular/router/issues/325"
          }
        },
        "nested data-driven components": {
          "text": "pass the app-nested-list the topmost level then within app-nested-list component extract the next layer of data which it passes to another instance of app-nested-list\nthis continues recursively",
          "code": "// parent node\n<app-nested-list [data]=\"data\"></app-nested-list>\n\n// then within the nested-list component\n<ul>\n<li *ngFor=\"let key of dataKeys\">\n<div [innerHTML]=\"toString(key) | escapeHtmlTags | sanitizeHtmlPipe\"></div>\n<app-nested-list [data]=\"data[key]\"></app-nested-list>\n</li>\n</ul>"
        },
        "displaying code within inner html": {
          "text": "by default all code set via html will be added as html in the dom rather than as text, so if you want to show an html code sample you can create a pipe to replace < with &amp;lt; and > with &amp;gt;",
          "code": "html.replace(/</g, '&amp;lt;').replace(/>/g, '&amp;gt;').replace(/\\n/g, '<br>');"
        },
        "arguments to angular pipes": {
          "text": "when adding a pipe to your template use : to then pass parameters, : delimited for multiples,",
          "code": "myString | myPipe : myParam"
        },
        "library projects": "currently ng-packagr doesn't have the ability to package up assets for library projects\n There is a workaround involving the code below in your npm scripts then referencing <your node module>/src/assets as one of the assets in your angular.json but its a bit icky. In my case I was referencing an svg file which I just put inline",
        "todo": {
          "micro front-ends": "using @angular/elements"
        },
        "ng template": {
          "text": "already being used under the hood for common directives such as *ngIf, *ngFor and *ngSwitch"
        },
        "ng container": {
          "text": "you cannot have 2 structural directives on the same node, but ideally you don't want to create an unnecessary extra div - ng-container fixes this issue",
          "code": "<div *ngIf=\"lessons\">\n    <div class=\"lesson\" *ngFor=\"let lesson of lessons\">...\n// can be done as:\n\n<ng-container *ngIf=\"lessons\">\n    <div class=\"lesson\" *ngFor=\"let lesson of lessons\">"
        },
        "protractor": {
          "fix \"Chrome version must be between x and y\" error if you're not able to upgrade to protractor 6 (yarn version)": "manually update the webdriver-manager dependency to the latest version in your yarn.lock, yarn cache clean, rm -rf node_modules, yarn install"
        },
        "angular async pipe": {
          "text": "The angular async pipe allows the subscription to observables inside of the angular template syntax. Obvs this can also be used if *ngIf's. This also manages unsubscribing from the observable. Syntax eg",
          "code": "<p>{{ myObservable$ | async }}</p>"
        },
        "Internationalization (il8n)": {
          "why i18n?": "its just an annoying obfuscation (ie it hinders people new to the subject) referring to the 18 letters between the i and n",
          "Internationalization vs Localisation": ""
        },
        "material": {

        },
        "forms": {
          "template vs reactive": {
            "difference": "In a template-driven approach, most of the logic is driven from the template. In reactive-driven approach, the logic resides mainly in the component. Template-driven forms are harder to unit test",
            "imports": "template requires FormsModule, reactive requires ReactiveFormsModule"
          }
        },
        "upgrade to latest cli": "npm install -g @angular/cli@latest"
      },
      "rxjs": {
        "hot vs cold observables": "Subjects, unlike regular Observables, are what we would call “Hot”. A hot Observable is an Observable that can start emitting events before you subscribe. This means you can miss previous events that have already emitted"
      },
      "vim": {
        "switch case": "~",
        "reload current file": ":edit",
        "current line to top of screen": "z",
        "exit with error code - quick way to exit from doing a git commit": "cq",
        "repeat last visual selection": "gv",
        "folding": {
          "zo": "open folder under cursor",
          "zc": "close folder under cursor"
        }
      },
      "tmux": {
        "text": "I've hit the point where the number of tabs in my console are disappearing off the end of the window.\n Tmux helps with this - instead of window -E tab - terminal - shell it does window - tab - terminal -E shell.\n More accurately we have something more like window - tab - terminal shell -E tmux session -E tmux window -E tmux pane - tmux shell. Although I love the ideas here my early experiences are that nvm stopped working and my vim settings were changed. I'll come back to this but not time to resolve these types of problems at the mo"
      },
      "typescript and javascript": {
        "regex": {
          "negative lookahead": {
            "text": "this isn't possible in javascript / typescript but this workaround is pretty straightforward\neg if you want to match all html tags except <code>",
            "code": "/(?!<code>)<.*>/g"
          }
        }
      },
      "nginx": {
        "installing on a mac": "brew install nginx",
        "basic commands": {
          "code": "// start in background\nnginx\n\n// fast shutdown\nnginx -s stop\n\n// graceful shutdown\nnginx -quit - graceful shutdown\n\n// update from nginx.conf\nnginx -s reload"
        },
        "nginx.conf": "this cannot be made unique per project (without containers) - it lives in /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx"
      },
      "nginx Dockerfile": {
        "super simple example": {
          "dockerfile": {
            "code": "# just create the default server\nFROM nginx"
          },
          "create the image": {
            "code": "docker build -t outsourcedmemory ."
          },
          "list all images to see your new entry": {
            "code": "docker image ls"
          },
          "create the container from the image": {
            "code": "docker run -itd --name outsourcedmemorycontainer --publish 8080:80 outsourcedmemory"
          },
          "list all containers to see your new entry": {
            "code": "docker container ls"
          },
          "view the site": "go to http://localhost:8080/ to see the standard nginx page",
          "get the id of the running container": {
            "text": "copy the container id shown for your new container",
            "code": "docker container ls"
          },
          "stop the running container": {
            "code": "docker container rm <container id>"
          }
        }
      },
      "docker": {
        "images and containers": "a container is an instance of an image",
        "hub": "hub.docker.com - repo of shared images",
        "commands": {
          "create an image": {
            "code": "docker build -t your-project-tag-name ."
          },
          "create a container from an image": {
            "code": "docker run -p 4201:4200 --name your-project-tag-name your-project-tag-name"
          }
        },
        "stop all running containers": {
          "code": "docker stop $(docker ps -a -q)"
        }
      },
      "css": {
        "preventing double borders on n adjacent boxes": {
          "code": "div {border-right: none;}\ndiv:last-child {border-right: 1px}"
        },
        "media query precedence": "these don't take precedence over regular css - best to stick these at the bottom of the css to ensure they're applied"
      },
      "npm": {
        "using npm for local typescript dependencies": {
          "npm link": {
            "step1": "go into your (generated) dist folder (I always copy my package.json into my dist folder so this might be necessary)",
            "step2": "npm link",
            "step3": "go into the project that's using your project",
            "step4": "npm link <npm dependency name from package.json>",
            "step5": "for bonus points build this link command into your npm scripts so you don't have to bother with a readme and add a npm watch in to rebuild as soon as your dependency updates",
            "note": "it isn't possible to chain together modules using npm link as it doesn't move your linked node_modules into your generated node_modules - you can work around this by also running npm link in your dist folder everytime you generate it"
          }
        },
        "using variables in scripts": {
          "using the version property": {
            "code": "echo $npm_package_version"
          },
          "using a custom property": {
            "in your package.json add": {
              "code": "\"config\": {\n\t\"my_prop\": \"my val\"\n}"
            },
            "in your script": {
              "code": "echo $npm_package_config_my_prop"
            }
          },
          "making it work cross platform": {
            "windows requires a different syntax - so to make your code cross-platform try the cross-var package": {
              "code": "%npm_package_<my prop>%"
            },
            "install cross var": {
              "code": "npm i cross-var --save-dev"
            },
            "use cross var": {
              "code": "cross-var echo $npm_package_<my prop>"
            }
          }
        }
      },
      "git": {
        "delete untracked files": {
          "code": "git clean -f -d"
        },
        "revert a number of commits and keep history": {
          "code": "git revert --no-commit <your SHA>..\ngit commit -m \"<your commit message>\""
        },
        "debugging git over ssh": "GIT_SSH_COMMAND=\"ssh -v\" git clone git@github.com:<your url>",
        "github": {

          "managing multiple accounts on one machine" : {
            "prerequisite": "we're going to make use of conditional includes in your .gitconfig (introduced with git v2.13) so ensure that your different projects share a unique parent folder",
            "step_1": "cd ~/.ssh",
            "step_2": {
              "code": "ssh-keygen -t rsa -b 4096 -C \"<the email address used by your first github repo>\""
            },
            "step_3": "name it something like rsa_personal",
            "step_4": "don't bother with the password",
            "step_5": "run ls to see the 2 files generated - the .pub contains the public key that can go on github; the other file contains your private key",
            "step_6": "copy the public key, login to your github then go to settings > SSH and GPG keys > new SSH key",
            "step_7": "paste the key in and save",
            "step_8": "repeat steps 1-7 but with the email address used by your next github repo(s) - name it something appropriate eg rsa_work",
            "step_9": "vim ~/.ssh/config",
            "step_10": {
              "code": "Host github.com\n   HostName github.com\n   User git\n   IdentityFile ~/.ssh/id_rsa_personal\nHost github.com-work\n   HostName github.com\n   User git\n   IdentityFile ~/.ssh/id_rsa_work"
            },
            "step_11": {
              "update your main .gitconfig to tell it to point to the new local one we're about to make": "vim ~/.gitconfig",
              "code": "[includeIf \"gitdir:~/dev/work/\"]\n    path = ~/dev/work/.gitconfig"
            },
            "step_12": {
              "create your new contextual .gitconfig in the root of your path your put in the main .gitconfig eg": "vim ~/dev/work/.gitconfig>",
              "code": "[user]\nname = Dominic-McAdden\n    email = dominic.mcadden@lloydsonlinedoctor.com"
            },
            "step_13": "cd ~/.ssh",
            "step_14": "call ssh-add passing the new paths eg ssh-add id_rsa_personal, ssh-add id_rsa_work",
            "step_15": "ssh-add -l - confirm that the keys have been added",
            "step_16": {
              "text": "sign in to both accounts",
              "code": "ssh -T personal\nssh -T work"
            },
            "step_17": "done! now whenever your within your contextual folder it will use the appropriate credentials - please remember to update the github url to whatever you've got in your .ssh/config (in my case my personal stuff stays unmodified and my work I change ot github.com-work). Also remember the condition includes will only work in git initialised repos"
          }
        }
      },
      "bash scripting": {
        "find port in use": {
          "code": "lsof -n -i4TCP:3001 | grep LISTEN",
          "text": "2nd param returned is the port"
        },
        "kill process bypid": {
          "code": "kill -9 <pid>"
        }
      },
      "rxjs": {
        "v6": {
          "from": "this is like casting - turning a promise, array, collection or string into an observable"
        }
      },
      "webstorm": {
        "optimise imports": "ctrl + alt + o"
      },
      "testing": {
        "test doubles (Martin Fowler version)": {
          "Dummy objects": "are passed around but never actually used. Usually they are just used to fill parameter lists",
          "Fakes": "actually have working implementations, but usually take some shortcut which makes them not suitable for production (an InMemoryTestDatabase is a good example)",
          "Stubs": "provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.",
          "Spies": "are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.",
          "Mocks": "are pre-programmed with expectations which form a specification of the calls they are expected to receive. They can throw an exception if they receive a call they don't expect and are checked during verification to ensure they got all the calls they were expecting."
        }
      }
    }
  }
}
